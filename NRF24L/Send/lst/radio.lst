C51 COMPILER V9.05   RADIO                                                                 08/03/2016 19:45:47 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE RADIO
OBJECT MODULE PLACED IN .\build\radio.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE radio.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\lst\radio.lst) OBJECT(.\bui
                    -ld\radio.obj)

line level    source

   1          /* Copyright (c) 2008 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor. The use, copying, transfer or disclosure of such information 
   5           * is prohibited except by express written agreement with Nordic Semiconductor.
   6           *
   7           * $LastChangedRevision:$
   8           */
   9          
  10          /** @file
  11           * Radio functions for the nRF24LE1 example application.
  12           *
  13           * This file handles all radio communication for the example application, i.e. 
  14           * radio_init, radio_send_packet and radio_interrupt function.
  15           *
  16           * @author Rune Brandsegg
  17           * @author Ivar C. OEsthus
  18           *
  19           */
  20          
  21          #include "hal_nrf.h"
  22          #include "system.h"
  23          #include "radio.h"
  24          
  25          code const uint8_t address[HAL_NRF_AW_5BYTES] = {0x22,0x33,0x44,0x55,0x01};
  26          static uint8_t radio_status;                    // Global radio status byte; 
  27                                                          // READY, BUSY, TX_DS, MAX_RT
  28                                                          // or RX_DR
  29          void radio_init(uint8_t operation_mode)
  30          {
  31   1        RFCE = 0;                                     // Disable radio
  32   1      
  33   1        hal_nrf_enable_ack_payload(true);             // Enable dynamic ack
  34   1        hal_nrf_enable_dynamic_payload(true);         // Enable dynamic payload
  35   1        hal_nrf_setup_dynamic_payload(0xFF);          // All pipes uses dynamic ack.
  36   1      
  37   1        hal_nrf_close_pipe(HAL_NRF_ALL);              // First close all radio pipes
  38   1                                                      // Pipe 0 and 1 open by default
  39   1        hal_nrf_open_pipe(HAL_NRF_PIPE0, true);       // Open pipe0, with autoack
  40   1      
  41   1        hal_nrf_set_crc_mode(HAL_NRF_CRC_16BIT);      // Operates in 16bits CRC mode
  42   1        hal_nrf_set_auto_retr(15, 250);               // 250 µs delay, 15 retransmits
  43   1        
  44   1        hal_nrf_set_address_width(HAL_NRF_AW_5BYTES); // 5 bytes address width
  45   1        hal_nrf_set_address(HAL_NRF_TX, address);     // Set device's addresses
  46   1        hal_nrf_set_address(HAL_NRF_PIPE0, address);  // Pipe0 used for auto ACK
  47   1      
  48   1        if(operation_mode == RECEIVER)                // Mode depentant settings
  49   1        {        
  50   2          hal_nrf_set_operation_mode(HAL_NRF_PRX);    // Enter RX mode
  51   2          RFCE = 1;                                   // Enable radio
  52   2        }
  53   1        else                                          // Mode depentant settings
  54   1        {
C51 COMPILER V9.05   RADIO                                                                 08/03/2016 19:45:47 PAGE 2   

  55   2          hal_nrf_set_operation_mode(HAL_NRF_PTX);    // Enter TX mode
  56   2        }
  57   1        
  58   1        hal_nrf_set_rf_channel(40);                   // Using channel 40 (2440MHz)
  59   1        hal_nrf_set_power_mode(HAL_NRF_PWR_UP);       // Power up device
  60   1        hal_nrf_set_output_power(0x02);               //leaf    00 2m   01 5m  02       8m    03 10m
  61   1        radio_status = RF_IDLE;                       // Radio ready, i.e. RF_IDLE
  62   1      }
  63          
  64          
  65          void radio_send_packet(uint8_t *payload, uint8_t length)
  66          {
  67   1        hal_nrf_write_tx_payload(payload, length);      // Load message into radio
  68   1        
  69   1        CE_PULSE();                                   // Send packet
  70   1      
  71   1        radio_status = RF_BUSY;                       // Trans. in progress; RF_BUSY
  72   1      }
  73          
  74          bool radio_busy(void)
  75          {
  76   1        return(radio_status == RF_BUSY);       
  77   1      }
  78          
  79          bool radio_packet_sent(void)
  80          {
  81   1        switch(radio_status)
  82   1        {
  83   2          case HAL_NRF_TX_DS:                         // Packet sent
  84   2            radio_status = RF_IDLE;                   // Return to radio:RF_IDLE
  85   2            return true;                                  
  86   2            break;
  87   2      
  88   2          case HAL_NRF_MAX_RT:                        // Packet lost
  89   2            radio_status = RF_IDLE;                   // Return to radio:RF_IDLE
  90   2            return false;
  91   2            break;
  92   2          
  93   2          default:
  94   2            return false;
  95   2            break;
  96   2        }
  97   1      }
  98          
  99          bool radio_data_received(void)
 100          {
 101   1        return(radio_status == HAL_NRF_RX_DR);
 102   1      }
 103          
 104          uint8_t radio_read_data(uint8_t *rx_data)
 105          {
 106   1        uint8_t length = LSB(hal_nrf_read_rx_payload(rx_data)); // Get received data,
 107   1                                                              // and bytes received   
 108   1        if (hal_nrf_get_rx_fifo_status() == FIFO_EMPTY)       // Fifo is empty?       
 109   1        {
 110   2          radio_status = RF_IDLE;
 111   2        }
 112   1        return length;
 113   1      }
 114          
 115          
 116          void radio_interrupt(void)
C51 COMPILER V9.05   RADIO                                                                 08/03/2016 19:45:47 PAGE 3   

 117          {
 118   1        switch(hal_nrf_get_clear_irq_flags())
 119   1        {
 120   2          case (1<<HAL_NRF_MAX_RT):                   // Max retries reach LED2_flash
 121   2            hal_nrf_flush_tx();                       // Flush tx fifo, avoid jamming
 122   2            radio_status = HAL_NRF_MAX_RT;
 123   2            break;
 124   2          
 125   2          case (1<<HAL_NRF_TX_DS):                    // Packet sent, LED1_flash      
 126   2            radio_status = HAL_NRF_TX_DS;
 127   2            break;
 128   2          
 129   2          case (1<<HAL_NRF_RX_DR):                    // Packet received, LED1_flash
 130   2            radio_status = HAL_NRF_RX_DR;
 131   2            break;
 132   2            
 133   2          default:
 134   2            break;    
 135   2        }
 136   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    269    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =      1       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
